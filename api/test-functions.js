const fetch = require('node-fetch');

const API_BASE_URL = 'http://localhost:7071/api';

async function testAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ File Sharing API...\n');

  try {
    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞...');
    const departmentResponse = await fetch(`${API_BASE_URL}/departments`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: 'IT Department',
        description: 'Information Technology Department'
      })
    });
    
    if (departmentResponse.ok) {
      const department = await departmentResponse.json();
      console.log('‚úÖ –û—Ç–¥–µ–ª —Å–æ–∑–¥–∞–Ω:', department.name);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞:', departmentResponse.status);
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª—ã
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤...');
    const departmentsResponse = await fetch(`${API_BASE_URL}/departments`);
    
    if (departmentsResponse.ok) {
      const departments = await departmentsResponse.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤:', departments.length);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤:', departmentsResponse.status);
    }

    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...');
    const employeeResponse = await fetch(`${API_BASE_URL}/users/employees`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        firstName: 'John',
        lastName: 'Doe',
        email: 'john.doe@company.com',
        classification: 'Senior',
        office: 'New York',
        role: 'Software Engineer',
        department: 'IT'
      })
    });
    
    if (employeeResponse.ok) {
      const employee = await employeeResponse.json();
      console.log('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω:', `${employee.firstName} ${employee.lastName}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', employeeResponse.status);
    }

    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    console.log('\n4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...');
    const clientResponse = await fetch(`${API_BASE_URL}/users/clients`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        firstName: 'Jane',
        lastName: 'Smith',
        phone: '+1234567890',
        email: 'jane.smith@client.com',
        firmName: 'Smith & Associates',
        firmAddress: '123 Business St, New York, NY'
      })
    });
    
    if (clientResponse.ok) {
      const client = await clientResponse.json();
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', `${client.firstName} ${client.lastName}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', clientResponse.status);
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResponse = await fetch(`${API_BASE_URL}/users`);
    
    if (usersResponse.ok) {
      const users = await usersResponse.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse.status);
    }

    // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
    console.log('\n6. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    const documentResponse = await fetch(`${API_BASE_URL}/documents`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        title: 'Test Document',
        content: 'This is a test document content',
        authorId: 'test-author-id',
        approverId: 'test-approver-id'
      })
    });
    
    if (documentResponse.ok) {
      const document = await documentResponse.json();
      console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', document.title);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentResponse.status);
    }

    // –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
    console.log('\n7. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    const documentsResponse = await fetch(`${API_BASE_URL}/documents`);
    
    if (documentsResponse.ok) {
      const documents = await documentsResponse.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', documents.length);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', documentsResponse.status);
    }

    // –¢–µ—Å—Ç 8: –ü–æ–ª—É—á–∏—Ç—å SignalR URL
    console.log('\n8. –ü–æ–ª—É—á–µ–Ω–∏–µ SignalR URL...');
    const signalRResponse = await fetch(`${API_BASE_URL}/notifications/signalr-url?userId=test-user-id`);
    
    if (signalRResponse.ok) {
      const signalRData = await signalRResponse.json();
      console.log('‚úÖ SignalR URL –ø–æ–ª—É—á–µ–Ω:', signalRData.url ? '–î–∞' : '–ù–µ—Ç');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SignalR URL:', signalRResponse.status);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAPI();
